***1. Introducing of Node.js****

Until recentrly, we could run JavaScript code in a web browser.
Node is a JavaScript runtime that executes code OUTSIDE OF THE browser

We can use the same JavaScript syntax we know and love to write SERVER-SIDE CODE,
instead of relying on other languages like Python or Ruby.

***2. Node REPL***

REPL stands for Read Evaluate Print loop.
Inside a Node REPL we can type a JavaScripts commands (we are now in the 'word of JavaScript')

For example:
1 + 2 // 3
'hello' + 'world' // 'helloworld'

But some browser staff doesn't exist in REPL, for example global 'window' objects
Instead of 'browser's' window REPL has his own object - called 'global'

NEW stuff in Node.js REPL:
Node comes with a buch of build-in modules that don't exist in the browser.
These modules help us do things like interact with the operating sustem and files/folders.

NOT included in the Node.js REPL:
Because Node does not run in a browser, we don't habe access to all the browser "stuff".
The 'window', 'document' and DOM API's are not a thing in Node!

***3 Running the Node files (running files with node)***

We can run JS files (from our VSCode for example) in the terminal (in the general Bash terminal, not in the Node REPL)
by using keyword 'node'
1) Create a file in the basic terminal (Bash terminal) touch myfile.js
2) Open this created file in the VSCode and write some JS code there (for loop for example)
3) Execute the JS code in ther file in the terminal (Bash terminal) by saying: 'node myfile.js'

You can also indicate a longer 'way' to that file, for example: node JavaScript/myfile.js


**** 4) Process and argv ****

 - you can use Node.js in your standart bash terminal - to do it simply type 'node'
 - to exit from 'node' mode just type '.exit' (and you are bacj in a standart bash terminal (where commands like 'ls', 'cd', etc. works))
 - to check your current Node.js version simply type 'node'. Or even better type 'node -v' - you find out version AND will NOT switch to 'node' mode

In Node.js docs you can find a lot of stuff, but now we're talking about 'process'.
'process' is an object - it provides information about, and control over, the current Node.js process.
and it have a lot of .methods(), for example:

 - process.version;
 - process.cwd() (stands for current working directory) - the 'place' I'am currently running Node.js

 We are checking something called 'process.argv'
 process.agrv is not very useful if we run it from Node REPL, but it might be quite useful, if we run it from standard bash terminal

 1. process.argv by itself runs a string ('C:\\Program Files (x86)\\node.exe') in my case
 2. In a standart bash terminal we can create js file with, for example 'touch argv.js'
 3. In newly created 'argv.js' file we can console.log(process.argv) an output would be
 [
  'C:\\Program Files (x86)\\node.exe',
  'C:\\Users\\User\\Desktop\\Andrey\\JavaScrips\\JS-main\\node.js\\argv.js' <=== this is pointing on our present working directory and a file (argv.js)!
]

Basically the 'process.ergv' returns an array containing the command line arguments
passed when the Node.js process was launched.
The first element will be process.execPath (the path where Node.js is executed (in C:\\Program Files (x86)\\node.exe in my case))
The second value will always be a file, that we are executing (C:\\Users\\User\\Desktop\\Andrey\\JavaScrips\\JS-main\\node.js\\argv.js in my case)
*Any remainung argument will be addition command line arguments!*

So, if I would write node argv.js dogs cats chickens an output would be:
[
  'C:\\Program Files (x86)\\node.exe', <=== first is always a execPath
  'C:\\Users\\User\\Desktop\\Andrey\\JavaScrips\\JS-main\\node.js\\argv.js' <=== second is always a file,
  'dogs',
  'cats',
  'chickens'
]

Example:

1. Create a js file in bash terminal like 'touch greet.js'
2. Inside a newly created file try to use following js code

const arguments = process.argv.slice(2) // we're slicing 2 first array indexes we don't need (which is execPath(1) and working file(2))
for(let argument of arguments) {
    console.log(`Hey there ${argument}`); // and now we're looping over all argument in arguments and printing out argument in bash terminal    
}

How to get this argument?

3. We are writing (passing) them throuch bash terminal via 'node greet.js jura mami vladi andri' ==>
==> then this argument we write are 'filtred' via 'process.argv' in our greet.js file

**** 5) File system (fs) / modules ****

All file system operations have synchronous and asynchronous versions
We will use synchronous version in this example

Example: will create a script, that will create for us a folder and this folde will containg 3 main files:
Goal is:

1. To run a command 'node myscript.js Folder' (where 'Folder' is the name of the folder we want to create)
2. This created folder ('Folder') will contain inside 3 files:
 - index.html
 - styles.css
 - app.js

 To do this we need:

 1. Create a file (a .js file which will hold our script) - touch myscript.js;
 2. Then we will need to create a folder. We can to it with fs.mkdirSync (we using synchronous version). Here is a syntax from Node.js docs:

fs.mkdirSync('/tmp/a/apple', { recursive: true }, (err) => {
  if (err) throw err;
});

! But we will run a problem here immideately as 'fs' in not a thing by default (like 'process' for example),
'fs' is a module, that we actually need to 'require' first, before we wil be able to use it!
To do this we need to use command:       const fs = require('fs');

3. Now, after setting fs.mkdir we can create a folders!
   And to access our newly created folder rights immideately after we create is, 
   we can add process.argv[2] in our scrypt file (myscript.js) and save it to a variable ==>
   ==> const folderName = process.argv[2]; (we can even provide some default folder name in case, if it will not be defined through node myscript.js (Folder)),
   to do it we can use: const folderName = process.argv[2] || 'NewFolder' (so, if only 'node myscript.js' will be typed the default 'NewFolder' folder will be created anyway)
   [2] - we will access index 2 (3rd item) of 'process.argv' array
   (because remember - 1st index in always a node Path, 2nd index is our executing file and 3rd index is our 'argument', that we pass)
   So, after adding 'process.argv[2]' and run command node myscript.js Folder1 - we will create a 'Folder1' folder and access it right after creation.

4. Now we want to create and add 3 files in our newly created folder, to do this we can use 'fs.writeFileSync' ==>
   
   Syntax is:

   fs.writeFileSync(`${folderName}/index.html`);
   fs.writeFileSync(`${folderName}/styles.css`);
   fs.writeFileSync(`${folderName}/app.js`);
   (we are adding these 3 files in a newly created folder via folderName/)

   And we definately need to handle some errors during the creations and adding file, so we can add some 'try' / 'catch':

   try {
    fs.mkdirSync(folderName);
    fs.writeFileSync(`${folderName}/index.html`) // !you may want to write this code folowing to avaid Node.js errors! fs.writeFileSync(`${folderName}/index.html`, '');
    fs.writeFileSync(`${folderName}/styles.css`)
    fs.writeFileSync(`${folderName}/app.js`)
  } catch (error) {
    console.log(error)
  } 
  







