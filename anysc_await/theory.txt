=====================// 1st Lesson: THE CALL STACK // ===========================

The mechanism the JS interpreter uses to keep track of its place 
in a script that calls multiple functions.

How JS 'knows' what function is currenctly being run and what 
fucntion are called from within that function, etc.

Last thing in ... first thing out ... principe

HOW IT WORKS:

 - When a script calls a function, the interpreter adds it to the 
   call stack and then starts carrying out the function.
 - Any functions that are called by that function are added to the 
   call stack further, and run where their calls are reached.
 - When the current function is finished, the interpreter takes if off
   the stack and resumes execution where if ledt off in the last code listing.

**** Widget for visualizing call stacks: loupe.com  ****  
**** Of Debuger in browser: Source => Page => app.js file =>
     => add breakpoint => Call Stack => Refresh the page =>
     => processing by next step value




=======// 2nd Lesson WebAPI's & Single Threaded (однопоточность) // ===========

At any given point in time, that single JS thread is running at most
ONE line os JS code.

But what happens when something takes a long time? For example:

1. const newTodo = input.valuel // get (receive) user's input // takes 0.5sec
2. saveToDatabasa(newTodo); // saving this new user's input into a database // takes 2sec
3. input.value = '' // setiing input value back to empty // takes 0.2sec

Fortunately we have a workaround options! (Callbacks // setTimeout)

console.log('Print me First!');
setTimeout(() => {
    console.log('Print me Third after 3 seconds!')
}, 3000);
console.log('Print me Second!');

How does it possible if JS is single - threaded and only ONE operation can
be processed at one time?

Answer is - browser is doing a part of the job (it is mosty written on a different
languages, like C++ and it can to things JS can't do!), so JS actually 'deligates'
some work to a browser!

- Browser come with Web APIs that are able  to handle certain tasks in 
  the background (like making requests of setTimeout)

- The JS call stact recognizes these Web API functions and passes the off
  to the browser to take care of

- Once the browser finishes those tasks, they return and re pushed onto 
  the stack as a call back

==============// 3rd Lesson: THE CALLBACKS HELL PROBLEM // =====================

Let's say, we're setting background colors to different colors and we want them to change
after some certain amount of time:

setTimeout(() => {
    document.body.style.backgroundColor = 'red';
}, 1000);

setTimeout(() => {
    document.body.style.backgroundColor = 'orange';
}, 2000);

setTimeout(() => {
    document.body.style.backgroundColor = 'yellow';
}, 3000);

// Or we can NEST everytnig:

setTimeout(() => {
    document.body.style.backgroundColor = 'red';
    setTimeout(() => {
        document.body.style.backgroundColor = 'orange';
        setTimeout(() => {
            document.body.style.backgroundColor = 'yellow';
        }, 1000);
    }, 1000);
}, 1000);

You can also do a generic fucntion, so you don't need to hard-code color and delay seconds everytime, for example:

const randomColorDelay = (color, delay) => {
    setTimeout(() => {
        document.body.style.backgroundColor = color;
    }, delay);
};

randomColorDelay('red', 3000);

But we can't pick and change NEXT color this way, insted we could also do NEXTING here, by passing another function,
let's say doNext() as an argument:

const randomColorDelay = (color, delay, doNext) => {
    setTimeout(() => {
        document.body.style.backgroundColor = color;
    }, delay);
    doNext()   <=== run doNext() to change next color
};

randomColorDelay('red', 3000, () => {
  console.log('This is our doNext function');
});

Why to we need callbacks and nested functions like this?
As this is increabibly common patter, for example:

movieSearchAPI('amadeus', () => {    // 1. our movieSearchAPI() function searches a movie from movie-API data base
    saveToMyDB(movie, () => {        // 2. after movie is found we run saveToMyDB() function to save some 'movie' to my data base
        () => {
            // and if everything wen of, withour any errors do this:
        }                        // 3.   
    }, () => {
        // or, if something went wrong, and there is some errors - do this
    })
});


//==============================  4th Lesson: ENTER PROMISES ====================================================//

A Promise is an object representing the eventual completion or failure of an 
asynchronous operation.
Promise (промис) - это объект, представляющий результат успешного или неудачного завершения асинхронной операции

A promise is a returned object to which you attach callbacks, instead of passing
callbacks into a function.

For examplem promise object can have 'pending' status (it is waiting for 
somethins to be either 'resolved' or 'rejected') (the other two statuses)

const fakeRequestPromise = (url) => {
    return new Promise((resolve, reject) => {
        const delay = Math.floor(Math.random() * (4500)) + 500;
        setTimeout(() => {
            if (delay > 4000) {
                reject('Connection Timeout :(')
            } else {
                resolve(`Here is your fake data from ${url}`)
            }
        }, delay)
    })
};

// Running promise functions://

1 step: save promise in a variable:
const request = fakeRequestPromise('yelp.com/api/coffee');

2 step: if the promise is 'resolved' run this:
request  // <=== request in an object and we run object methods (.then, .catch) on it
     .then(() => {
         console.log('It worked!') // <=== .then represents something, that worked
     })
     .catch(() => {               // <==== .cathc represents something, that didn't worked
         console.log('Error')
     });

// Nested .then .catch promises: //

fakeRequestPromise('yelp.com/api/coffee/page1')
     .then(() => {
         console.log('Worked, page 1 displayed')
         fakeRequestPromise('yelp.com/api/coffee/page2')
             .then(() => {
                 console.log('Worked, page 2 displayed')
             })
             .catch(() => {
                 console.log('Error, didnt worj for page 2')
             })
     })
     .catch(() => {
         console.log('Error, didnt work for page 1')
     })

// The real MAGIC of promises //

If we return the promise withing .then - we can then chain all promises together

// =========================== 5th Lesson CREATING OUR OWN PROMISES ==============================================//


FIRST 'PART' OF PROMISES
1 step - kew word new Promise
2 step - new Promise expects us to pass in 2 callback functions as a parametrs
    First function (usually called 'resolved') will handle only 'good' outcomes ('resolved', 'fulfilled')
    Second function (usually called 'rejected') will handle only 'bad' outcomes ('rejected')
3 step - we write logic - when, at what conditions resolved will work, and when reject will work
    We can even call this functions by their own simply write resolve() inside a Promise
4 step - in the 'resolve' and 'reject' functions we can pass their own parameters like this: resolve('Good output');
or rejected('Bad output')

SECOND 'PART' OF PROMISES:
1 step - we can create our own function, which will accept for example one parametr (url) and this function will return our Promise
const fakeReguestData = (ulr) => {
     return new Promise ...
}
2 step - all 'positive', resolved values will be captured in .then(() => {})
2.1 step - (see FIRST 'PART' step 4): .then(data) => {console.log(data)} - data will store 'Goog output' value!
3 step - all 'negative', rejected values will be captured in .catch(() => {});
2.2 step - (see FIRST 'PART' step 4): .catch(error) => {console.log(error)} - data will store 'Goog output' value!
4 step .then and .catch methods are called on the functions:
 fakeReguestData('www.google.com').then((data) => {console.log(data)})
 fakeReguestData('www.google.com').catch((error) => {console.log(error)})

Smoothier syntax using return:

fakeReguestData('www.google.com/page1')
  .then(() => return fakeReguestData('www.google.com/page2'))
  .then(() => return fakeReguestData('www.google.com/page3'))
  .then(() => return fakeReguestData('www.google.com/page4'))
  .catch((error) => console.log(error))          // only one .catch can be used in this case in the end

// ============================== 6th Lesson: async keyword ===========================================================//

Async functions:

A newer and cleaner syntax for working with async code!
So called syntax - sugar

- Async functions always return a promise
- If the function returns a value (return 'Hello world') // 'Hello world' is a value
  the promise will be resolved with that value (same as .then((data)) (data is a value)
- If the function throws an exeption, the promise will be rejected

Basic syntax:

async function hello() {
    return 'Hello, guys!'     // async + return = 'resolve' .then(('Hello, guys!'))
};

hello() // return Promise {resolved}, value 'Hello, guys!'

async function bye() {
    throw new Error('Good bye!') // async + throw new Error = rejected
};

bye() // returns a Promise {rejected}, value 'Good bye!' (same as .catch(('Good bye!'))

const login = async (username, password) => {
    if (!username || !password) {
        throw new Error('Invalid login!')
    } else if (username != 'Andrew' && password != 'pjladd') {
        throw new Error('Invalid username or password!')
    } else {
        return 'Congratulation, login succesfull'
    }
};

login()
    .then((message) => {
        console.log(message);
    })
    .catch((message) => {
        console.log(message);
    });

// ======================================= 7th Lesson: await keyword ================================================= //

Await keyword:

- We are using 'await' keyword together (inside) async function, basically,
  inside of functions declared with async (  async function()  )
- 'await' will pause the execution of the function, WAITING FOR A PROMISE TO BE RESOLVED!

Example (with .then syntax):

const delayedColorChange = (color, delay) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            document.body.style.backgroundColor = color;
            resolve();
        }, delay)
    })
}

// delayedColorChange('red', 2000)
//     .then(() => delayedColorChange('orange', 2000))
//     .then(() => delayedColorChange('yellow', 2000))
//     .then(() => delayedColorChange('green', 2000))
//     .then(() => delayedColorChange('blue', 2000))
//     .then(() => delayedColorChange('indigo', 2000))
//     .then(() => delayedColorChange('viole', 2000))

Example (with async - await):

const rainbow = async () => {
    await delayedColorChange('red', 1000);
    await delayedColorChange('orange', 1000); // <=== this code will run ONLY when forst part
                                                 await delayedColorChange('red', 1000) is resolved! etc.
    await delayedColorChange('green', 1000);
    //And then in the end we can even add some other functions() to be executed!
    await anotherFunction('number', 'summ')
    // Or execute (resolve) rainbow() by it's own
    return 'End of the Rainbow'
}

rainbow().then((message) => {
    console.log('Rainbow ends here!'); // this will be executed only after all 'awaits'
    console.log(message) // 'End of the rainbow'
});

async function endOfRainbow() {
    await rainbow();
    return 'Now it really ended!'
};

endOfRainbow()
    .then((message) => {
        console.log(message);
    })

You can even 'nest' them
async function endOfRainbow() {
     await rainbow();
     return 'Now it really ended!'
 };

 endOfRainbow()
     .then((message) => {
         console.log(message);
     })

// =========================== 8th Lesson: Handling error in async functions (reject) ========================= //

Code example:

const fakeRequestPromise = (url) => {
    return new Promise((resolve, reject) => {
        const delay = Math.floor(Math.random() * (4500)) + 500;
        setTimeout(() => {
            if (delay > 1000) {
                reject('Connection Timeout :(')
            } else {
                resolve('resolved');
            }
        }, delay)
    })
};

We can CAPTURE a value returned in resolve in variable and the worj with that variable

async function receivingData() {
     let data = await fakeRequestPromise('myhouse/page1');
     console.log(data);
};

receivingData(); // prints resolved

****How do handle errors in async functions? (.catch / reject)****

We can actually do it with a try - catch:

async function receivingData() {
     await fakeRequestPromise('myhouse/page1');
     try {
         erororr.log('hello') //  some error appears
     }
     catch (error) {
         console.log('An Error appeared', error) // error is the value of the error in try itself (erororr.log('hello') in or case)
     }
 };

receivingData();

How it will work with our fakeRequestPromise()

async function receiveData() {
    try {
        await fakeRequestPromise('myhomepage/page1');
        await fakeRequestPromise('myhomepage/page2'); // if at some point error (reject) will appear it will be caught 
        await fakeRequestPromise('myhomepage/page3'); // in catch and we will see it and will be able to check what exactly this erro is!
    }
    catch (error) {
        console.log('Error is caught');
        console.log(error);
    }
};











