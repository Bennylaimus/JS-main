 // ========================== 1st Lesson: Into to AJAX & APIs * JSON ============================== //

 AJAX (Asynchronous Javascript And XML):
 Basically AJAX is all about making different browser - Javascript requests

 APIs:
 API (Application Programming Interface) (but basically it's just a way for one machine's programm
 to interact with the other machine's programm, one software with another software)

 Main idea of AJAX request is to get some API (just some data, that is received in the
 specific format called JSON), not the whole page (containing HTML, CSS and all JS scripts), but just
 some specific small amount of data.

You will ofter hear Web API termin - basically this is a HTTP based programms interactiong with
other HTTP based programms.

JSON: (Java Script Object Notation) 
 - Official wedsite: json.org
 - JSON validator: jsonformatter.curiousconcept.com

When we send an API request (in browser it is an HTTP request send from us to other browser's software)
we receive a reply:
 - we can receive it in XML format (an old less commonly used method),
 - or in JSON format - most commonly used API receive format
So it more like AJAJ (Asynschronous Javascript And Json), but everyone still says just AJAX
So bacicalley JSON - is just a way to FORMATTING DATA and transfer it in an
understandable format

 - JSON format keep an information in OBJECT - style format, but there are few differences!

 1. every key - value pair is a "" (double quoted) string
    "squadName": "Super Hero Squad",
    "formed": 2016,
    "active": true,

2. It doesn't support undefined value (it will consider it as a string) "isActive": "undefined"

Basically, when we receive a JSON reply - we receive a huge "" string and we can't really
extract a data from it.

Method we use to extract data from JSON file is:

JSON.parse("string") ===> and JSON file will be parsed into JavaScript Object

Example:

JSON parse example:
const data = { "time": { "updated": "May 5, 2023 16:35:00 UTC", "updatedISO": "2023-05-05T16:35:00+00:00", "updateduk": "May 5, 2023 at 17:35 BST" }, "disclaimer": "This data was produced from the CoinDesk Bitcoin Price Index (USD). Non-USD currency data converted using hourly conversion rate from openexchangerates.org", "chartName": "Bitcoin", "bpi": { "USD": { "code": "USD", "symbol": "&#36;", "rate": "29,520.5065", "description": "United States Dollar", "rate_float": 29520.5065 }, "GBP": { "code": "GBP", "symbol": "&pound;", "rate": "24,667.0991", "description": "British Pound Sterling", "rate_float": 24667.0991 }, "EUR": { "code": "EUR", "symbol": "&euro;", "rate": "28,757.2833", "description": "Euro", "rate_float": 28757.2833 } } }

JSON.parse(data); // ==> JSON file parsed to an object

const parsedData = JSON.parse(data) // we can the save parsed data to a variable

parsedData.time.updateduk // "2023-05-05T16:35:00+00:00" // and we can now work with it like with an object and extract data as it is an object

Or we can go to other 'direction' and get some data from our object to be putted and parsed to a JSON file

Method we use for this is:

JSON.stringify(data)
(we replace all undefined's with a null)

Example:

let info = {
    animal: 'dog',
    age: 15,
    isHomeless: false,
    owner: undefined,
};

let toJson = JSON.stringify(info);
console.log(toJson); // output: {"animal":"dog","age":15,"isHomeless":false} (no undefined, as JSON do not accept it!)

// ============================== 2nd Lesson: Postman & Hoppscotch tools =================================================== //

The 'Postman' app is used by developer to check some APIs (to set their own API and test our own server connection
by sending some requests to our servers // useful with Node.js), check your GET requests etc.
Download for 'Postman' postman.com/downloads (an application)

Another similar tools, that does not require an authorisation is 'Hoppscotch'
'Hoppscotch' can be downloaded at hoppscotch.io (a link! Don't nee to download)

// ============== 3rd Lesson: HTTP Verbs, Status Code, Query Strings, HTTP Headers ======================================== //

The Hypertext Transfer Protocol (HTTP) is designed to enable communications between clients and servers.

HTTP works as a request-response protocol between a client and server.

Example: A client (browser) sends an HTTP request to the server; 
then the server returns a response to the client. The response contains status information about the request 
and may also contain the requested content.

*****VERBS*****:
GET // POST // PUT // PATCH // DELETE // HEAD // CONNECT // OPTIONS // TRACE // CUSTOM

*****HTTP Status Code*****:

A code, that comes back in out HTTP status request:
Status: 200, Status: 404, Status: 500 etc.
Need to read more about them!

***** Query Strings ******

The information we are prividing in the URL!
Depending on what we are providing - we are getting different otputs!
There are also some specific patterns, that are used in the URL requests, for example:

www.swapi/api/people/:id/  (:id)
: - meens it's a variable
id - will be replaced with some of your information (some of your variable)
===> www.swapi/api/people/5

You can also see this pattern with {}: // www.swapi/api/people/{id}, or <id>

Usylly in URL string we see something like this:
www.amazon.com/?k=bucket&ctid=3dform&person=22

The 'info' AFTER '?' are key - value pairs

Example with our swapi/api:

www.swapi/api/com/?color=blue&age=22&silly=yes

? - 'info' after '?'
color=blue (key - value pair) // & - separated by &
age=22 (key - value pair)     // & - separated by &
silly=yes (key - value pair)

It is important, because some APIs will want us to INCLUDE some specific query strings in the requests, for example:

Movie Search API:
URL: /search/shows?q=:query  ==> this API wants us to set some key (q) - value pair

Or can even request multiple key - value pairs for requests, for example:

URL: /schedule?country="countrycode&date=:date

***** HTTP Headers *****

Headers is an additional way to passing some information with a request and either with a response

They are also key - value pairs

We can see them in the browser's devtools under 'Network' section

! Some APIs are set up that way, that they requires us to send them User Headers in the request !

For example:

Accepted headers: 'Accept' (to get some specific response we need to set 'accept' header):

- baseurl.com/text/html - set this to get HTML response
- baseurl.com/application/json - set this to get JSON response
- baseurl.com/text/plain - set this to get plain text response

In this case key - value pair is:
Accept - application/json (for example)

// ============================= 3rd Lesson: XHRs - old way to making JS requests ======================= // 

XHRs:
XML Http requests
 - The 'original' (old) way of sending requests via JS.
 - Does not support Promises (so lots of callbacks!)
 - WTF is going on with the weird capitalization?
 - Clunky (неуклюжий) syntax that difficult to remember!

An example of XHRs (an 'original', 'old' version of getting requests with JS)

API we are working with (trying to get):
"https://swapi.dev/api/people/1/"

1 step - making a new XHR Request and savi it to a variable
const request = new XMLHttpRequest();

2 step 
Before sending a request - we need to prodive 2 callback (one - for 'positive' GET request (same as resolve),
second - with 'negative' result (same as reject)) - they looks following:

.onload - will run, when there is no Errors!
request.onload = function () {
    console.log('LOADED!'); // will console.log the request object - this
    const data = JSON.parse(this.responseText);
    console.log(data.name, data.height);
}
.onerror - will run, when there is an Error
request.onerror = function () {
    console.log('ERROR!');
    console.log(this); // will console.log the request object - this
}
3 step - use .open method on it and privide two parametrs (1. reguest type: "GET" 2. API URL)
request.open('GET', 'https://swapi.dev/api/people/1/');

4 step - after .open it - we need to send it:
request.send();

5 step (step 2.1)
* But what we are 'after' is actually a ResponseText object part
* So we can print that out with this.responseText
* As we get back a TEXT to access some specific part of the text we actually
  need to parse it to a JS object! (we are parse responseText content to JS object)
  so final step is:
  const data = JSON.parse(this.responseText); ===> now it is a JSON object
  and we can extract some 'parts', for example:
  console.log(data.height, data.age) etc

// ======================= 4th Lesson: Fetch API (the latest, newer way of getting APIs) ======================== //

Main idea is to use function called Fetch and this function supports Promies!
 - The newer way of making requests via JS!
 - Support Promises!
 - Not supported in Internet Explorer!

 So, how does it work?

Fetch function and getting API with Fetch function example:
API we are working with (getting): 'https://swapi.dev/api/people/1/'

1 step:
fetch("https://swapi.dev/api/people/1/"); <=== after we run this we get bacj a Promise (pending, fulfilled, response)

2 step:
As this is a Promise, we can actually use .then and .catch methods on it:
 fetch("https://swapi.dev/api/people/1/")
     .then((res) => {                     <=== res is Promise Response
         console.log('Resolved', res);
         - But we need to use .json method on the resolve (res) and it will also return to us a Promise
         - so we are using .then once again!
         res.json().then((data) => console.log(data)); <=== and only now we finnaly get our json object
     })
     .catch((err) => {
         console.log('Error!', err);
     })

This code above can be refactoring like this:

fetch("https://swapi.dev/api/people/1/")
     .then((response) => {
         return response.json();
     })
     .then((data) => {
         console.log(data);
     })
     .catch((error) => {
         console.log('Not Loaded!', error)
     })

In case if we have a nested / multiple requests - we can just use Promise syntax with return / .then

In this example above we are actually getting one API and only then another
Some time we MUST to it (for example, when we getting a full movie list first),
and only then an information about some specific movie

But we can actually make another refactoring using async fucntion!

Example:

const loadStarWarsInfo = async () => {
    try {                                  !! remember to use try - catch construction to catch any error in async functions!
        const response1 = await fetch("https://swapi.dev/api/people/1/")
        const data1 = await response1.json();
        console.log(data1);
        const response2 = await fetch("https://swapi.dev/api/people/2/")
        const data2 = await response2.json();
        console.log(data2);
    }
    catch (error) {
        console.log(error)
    }
};

loadStarWarsInfo();















