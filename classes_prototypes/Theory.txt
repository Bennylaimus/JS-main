// ================== 1st Lesson: Intro into prototypes =========================================== // 

Prototypes are the mechanism by which JavaScript objects inherit features from one another.
JavaScript often described as a prototype-based-language - to provide inheritance objects can have a
prototype object, which acts as a template object that it inherits methods and properties from.

Example:

const arr = [1,2,3];
const arr2 = [4,5,6];

arr.includes(2) // true
arr2.includes(5) // true

Both arr and arr2 have 'built in' includes() method, which is stored in __proto__ property which is a reference to 'prototype',
which stores all array / string methods

Same have a DOM - for example:

const doc = document.body
console.dir(doc) // we will see some properties, that are specific to this exact body and a property __proto__ (HTMLBodyElement)

*************************
Array.prototype // shows all the prototypes Array have
String.prototype // shows all the prototypes String have

We can even define our own object prototype and set it as an Array prototype (and it will be available for all other arrays we will use)

String.prototype.grumpus = () => {
    alert('Go Away, you Grampus!') 
}

We have now added a grumpus() method to a String prototypes and this method will be seen by all other Strings

Another example:

String.prototype.grumpus = () => {
    alert('Go Away you nasty Grumpus!');
}

const cat = 'Blue';
cat.grumpus() // alert (Go Away ...)

Another example:

String.prototype.yell = function () {
    console.log(this);
}

this - refers to 'anything', that is one the left (after.), in our case to String (String.yell) => (String.this)
'hello'.yell (same as String.yell, 'hello'.this)
console.log(this.toUpperCase) ===> 'hello'.toUpperCase()

String.prototype.yell = function() => {
    return OMG! `${this.toUpperCase()}` !!! OMGIIIII!
}

'I Love Piccas'.yell() // 'OMG! I LOVE PICCAS !!! OMGIIIII!'

************************************************************

We can even override some of the properties, for example override array.pop property:

Array.prototype.pop = function () {
    return 'I will never ever pop it up!' // will are now replacing the existing .pop method
}

const arr3 = [7, 8, 9];

console.log(arr3.pop()); // output ==> 'I will never ever pop it up!'

// ================== 2nd Lesson: Intro Into OOP & Factory Function ==================================== // 

An OOP basically is a Object - Oriented - Programming: basically, there is one central idea:
"Organizing our code, designing and structuring our application by breaking things up by a distinct patterns of objects, 
giving them defined behavior, like recepies"

We will create our own class (a 'recepie') with color name 'carrot' and rgb value for it (230, 126, 34)
and we will be able to easiealy switch between different color systems (hsl, rgb, hex) and even choose
opposite color to one we have

Basically our navColor will have some added methods, like rgb(), rgba(), opposite()

****Example of FACTORY FUNCTION:***

Some ready-function taken from stackoverflow, that accepts x3 rgb value and converts them to a hex:
function hex(r, g, b) {
     return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}
hex(255, 100, 25); // ==> #ff6432;

1. We can write a function, that takes 3 colors (r, g and b) and convert it to a rgb(r, g, b)
something, that we already did before
function rgb(r, g, b) {
         return `rgb(${r}, ${g}, ${b})`;
}
rgb(200, 50, 100);

2. So we have two our functions hex() and rgb(), which are functioning by their own perfectly, but now
   we will try to add them to an object and switch rgb and hex value, without passing numbers to hex() and
   separatety to rgb() each time
   Basically, the function, that will create as such object is calling a factory function

  - this function will create an object, which will store:
 1. and 'r', 'g', 'b' as an object values
 2. will have hex() method inside of this object
 3. will have rgb() method inside of this object

function makeColor(r, g, b) {       // 1. We are creating a fucntion()
    const color = {}                // 2. inside a fucntion we are creating an empty object {}  
    color.r = r                     // 3. we are adding 'r' from the function argument to object (with standart syntax: color.r = r)
    color.g = g                     // 4. Same with 'g'
    color.b = b                     // 5. Same with 'b'
    At this point: makeColor(255, 100, 20) ===>
    ===> {r: 255, g: 100, b: 20}; - we have an object with this keys / values

    Now we can add an rgb() method inside our object:
    color.rgb = function rgb() {    // 6.adding an rgb() method to our object
        const { r, g, b } = this;   // 7.because we need to access to some values of an object inside a method, we are using 'this' keyword (this in our case in 'color' object) - we can use 'destruction method' and assign this.r, this.g, this.b that way (check destruction objects lesson) it is same as return `rgb(${this.r}, ${this.g}, ${this.b})`;
        return `rgb(${r}, ${g}, ${b})`;
    }
    Now we are also adding hex() method inside our object
    color.hex = function hex() {
        const { r, g, b } = this;  // or you can 'hard-code' it this.r, this.g, this.b
        return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
    }
    return color                   // 8. and in the end we want to return this object {} (color)
};

Now we need to create a variable and store our makeColor() in that variable
We need to do it, because we will need to call .rgb and .hex methods on this variable
We can't just to it directly in makeColor()

const myColor = makeColor(100, 200, 250);

console.log(myColor); // ====>
====> myColor in this case is an object, that contains keys r: g: b: and .rgb() method and hex() method
and we pass 100 to r, 200 to b and 250 to g at the moment we assiging myColor to = maleColor(100, 200, 250)

console.log(myColor.rgb()); // it's looks the same as makeColor().rgb()
It's like we would wrire maleColor(100, 200, 250).rgb() and call an .rgb method on it
console.log(myColor.hex());

// ============================ 3rd Lesson: Constructor function ===================================== //

Another, more preferable approach, than "Factory Function"
Why?
In our previous example with "factory function" everytime we created a method inside a makeColor function (like .rgb() and .hex()) -
the UNIQUE method is created EVERY TIME and added to a 'color' object! But it's actually no reason to have a unique copy of function
(.rgb(), hex() ) every time!
If we would create a function rgb() {
    return `rgb(${r}, ${g}, ${b})`
}
we could use this one function everytime with different parametrs, no need to create a new function rgb2(), function rgb3 ()
everytime we pass in different parametrs. But this is NOT whar happening in the previous example (Fuctory funtion) - we actually
creating a 'new unique copy' of function every time and adding it to a 'color' object every time!

So here's where anothe approach comes in - a "Constructor Functions":

The idea of Constructor function is to put a method (a function inside an object) into a Prototype, so this method will be the sane
for all other objects it will be used with (it's like 'hi'.slice === 'bye'.slice // true), because slice is a method for ALL strings
'kept' as a Protorype

***Syntax of Constructor function:

The 'new' operator let's developers create an instance of a user-defined object of of one of the
build-in object types that has a construction function. The 'new' keyword does the following things:

1. Creates a blank, plain JavaScript object;
2. Links (sets the constructor of) this object to another object;
3. Passes the newly created object from 'Step 1' as the 'this' context;
4. Returns 'this' if the function doesn't return its own object.

1st Step: (creating a function, that creates an object for us):

function Color(r, g, b) {
     this.r = r;
     this.g = g;
     this.b = b;
  };
If we will call Color() function - in the scope of Color() function 'this' is not revering to any object, it will refers to 'window' object
But if we will call it with a 'new' keyword it will behaive defferently!
let result = new Color() - basically 'Step 1' & 'Step 3' are happening when we are calling function with 'new' keyword
1) it will created a new blanc object and 3) it will set 'this' to that new created object, so 'this' will now refers to this object
so with this.r = r, this.g = g, this.b = b we will be adding 'r', 'g' and 'b' to that new object
and then it 4) returns 'this' at the end.

let result = new Color(255, 50, 200);
console.log(result);

What it also did - it 'created' a constructor function under the Protorype! And it is the second thing it does ('Step 2')

function Color(r, g, b) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.rgb = function () {
         const { r, g, b } = this;
         return `rgb(${r}, ${g}, ${b})`
    }
};

Right now .rgb is still nod defined under Prototype - it is still as an unique copy of Color object
To make this work - we need to define this medhot OUTSIDE our Color obejct via .prptotype ===>
===>
Color.prototype.rgb = function () {
    const { r, g, b } = this;
    return `rgb(${r}, ${g}, ${b})`;
};

Color.prototype.hex = function () {
    const { r, g, b } = this;
    return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
}

We can also create an alpha-chanel rgba

Color.prototype.rgba = function (a = 1.0) {
    const { r, g, b } = this;
    return `rgba(${r}, ${g}, ${b}, ${a})`;
}

let color1 = new Color(200, 250, 40);
console.log(color1) // an .rgb method now defines under the 'prototype'! and can we used by anothe objects!

color1.rgb(); // and 'color1' object now have an access to .rgb() method via prototype

let color2 = new Color(240, 200, 100);
color2.rgb(); // and 'color2' object also now have an access to .rgb() method via prototype

let color3 = new Color(100, 50, 20,)


document.body.style.backgroundColor = color1.rgb(); // <=== standard color from color1 variable (which is new Color(200, 250, 40))
document.body.style.backgroundColor = color1.rgba(0.5); // <=== now we are using .rgba() method and passing (3) as an 'a' parametr

// ============================= 4th Lesson: Classes ==================================================================== //

*Syntax:

 class Color {                       // 1. We are using 'class' keyword with name (Uppercase)
     constructor(r, g, b, name) {    // 2. We are always adding a 'constructor()' function (in this specific example it will be executer IMMIDEATELY after new Color created)
         this.r = r;  // ====\         
         this.g = g;  // ======      // 4. 'this' follows the same pattern as in the previos lesson (3rd Lesson), it creates a new object and this is refered to that new created object
         this.b = b;  // ====/
         this.name = name;
     }
     greet() {
         return `Hello from ${this.name}!`; // 5. we can create methods inside classes (and in this case we need to use 'this' to access 'name' value in our created object, just like standart methods inside in an object do!)
     }
     The greate part obout it, is that greet() method is now a method available for all objects (it is putted under the prototypes)
     rgb() {
         const { r, g, b } = this;
         return `rgb(${r}, ${g}, ${b})`;
     }
     hex() {
         const { r, g, b } = this;
         return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
     }
 };

const myColor = new Color(255, 30, 70, 'tomato');  // 3. creating a 'new' (the construction() function will run immideately as soon as we created a 'new' Color)
const anotherColor = new Color(250, 100, 80);

*Adding an rgbd() method and doing some refactory*

 class Color {
     constructor(r, g, b, name) {
         this.r = r;
         this.g = g;
         this.b = b;
         this.name = name;
     }
     greet() {
         return `Hello from ${this.name}!`;
     }
     Two repeatitive lines of code: rgb(${r}, ${g}, ${b})
     Creating an inner function, which is responsible of returning 3 colors: (${r}, ${g}, ${b})
      innerRGB() {
         const { r, g, b } = this; // still needs an access to r, g, and b
         return `${r}, ${g}, ${b}` // will return only 3 colors, for example return will looks like: 225, 100, 150;
     }
     rgb() {
         return `rgb(${this.innerRGB()})`; // need to use this.innerRGB() to assecc to a returned innerRGB() values
     }
     rgba(a = 1.0) {
         return `rgba(${this.innerRGB()}, ${a})`; // neet to use 'this.innerRGB()' to access to a returned innerRGB() values
     }
     hex() {
         const { r, g, b } = this;
         return '#' + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
     }
 };

const myColor = new Color(255, 30, 70, 'tomato');  // 3. creating a 'new' (the construction() function will run immideately as soon as we created a 'new' Color)
const anotherColor = new Color(250, 100, 80);
const alphaColor = new Color(200, 100, 50);

console.log(anotherColor.rgb());
console.log(alphaColor.rgba(0.7));
console.log(anotherColor.hex());

*More class practice - adding a methods - adding an HSL color method to our Color class**

*Reminder: HSL(hue - оттенок, saturation - насыщенность, lightness - яркость)
Hue is a degree on the color wheel from 0 to 360. 0 is red, 120 is green, and 240 is blue.
Saturation is a percentage value. 0% means a shade of gray, and 100% is the full color.

The 'ready-funtion-from-stackoverflow' we are working with:

 calcHSL() {
     let { r, g, b } = this;
     // Make r, g, and b fractions of 1
     r /= 255;
     g /= 255;
     b /= 255;

     // Find greatest and smallest channel values
     let cmin = Math.min(r, g, b),
         cmax = Math.max(r, g, b),
         delta = cmax - cmin,
         h = 0,
         s = 0,
         l = 0;
     if (delta == 0) h = 0;
     else if (cmax == r)
         // Red is max
         h = ((g - b) / delta) % 6;
     else if (cmax == g)
         // Green is max
         h = (b - r) / delta + 2;
     else
         // Blue is max
         h = (r - g) / delta + 4;

     h = Math.round(h * 60);

     // Make negative hues positive behind 360°
     if (h < 0) h += 360;
    // Calculate lightness
     l = (cmax + cmin) / 2;

     Calculate saturation:
     s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));

     // Multiply l and s by 100
     s = +(s * 100).toFixed(1);
     l = +(l * 100).toFixed(1);
     this.h = h;
     this.s = s;
     this.l = l;
 }

******** So let's start working and add an calcHSL() to our Color class

class Color {
    constructor(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.calcHSL(); // **** 3) we can call an added method instantly from constructor
    }
    **** 5) So, let's create our own hsl() function, which will return something:
    Мы создаём этот метод для того, чтобы, когда calcHSL() метод выполнится (а он выполнится сразу, посколько мы 'засунули')
    его в constructor() и сразу что-то вернёт (а вернёт он некие значения 'h s l'), чтобы у нас был доспут к этим 'h s l' мы 
    в функции hsl() через 'this' получаем доступ к этим возвращённым значениям 'h s l' и возвращаем уже с помощью return в hsl() 
    hsl() {
        let { h, s, l } = this;
        return `hsl(${h}, ${s}%, ${l}%)`;
    }
    **** 6) Then, we can create another method called opposite(), which will generate opposite hsl color,
    To do this we need just to add +180 to current 'h(hue)' we have in hsl()
    opposite() {
        let { h, s, l } = this;
        let newHue = (h + 180) % 360;
        return `hsl(${newHue}, ${s}%, ${l}%)`;
    }
    **** 7) Lastly, we can add another method called 'fullySaturated' which will saturate provided color by 100%:
    fullySaturated() {
        let { h, l } = this;
        return `hsl(${h}, 100%, ${l}%)`;
    }
    calcHSL() {
        let { r, g, b } = this;    // *** 1) First, we need to 'grand access' to 'r g and b' by 'connectiong' them to 'this' as we ded before, as we will nedd this values later to settle our code
        // Make r, g, and b fractions of 1
        r /= 255;
        g /= 255;
        b /= 255;

        Find greatest and smallest channel values:
        let cmin = Math.min(r, g, b),
            cmax = Math.max(r, g, b),
            delta = cmax - cmin,
            h = 0,
            s = 0,
            l = 0;
        if (delta == 0) h = 0;
        else if (cmax == r)
            // Red is max
            h = ((g - b) / delta) % 6;
        else if (cmax == g)
            // Green is max
            h = (b - r) / delta + 2;
        else
            // Blue is max
            h = (r - g) / delta + 4;

        h = Math.round(h * 60);

        Make negative hues positive behind 360°:
        if (h < 0) h += 360;
        // Calculate lightness
        l = (cmax + cmin) / 2;

        // Calculate saturation
        s = delta == 0 ? 0 : delta / (1 - Math.abs(2 * l - 1));

        // Multiply l and s by 100
        s = +(s * 100).toFixed(1);
        l = +(l * 100).toFixed(1);
        // ****** 2) as we also will need an access to ''h, s and l' value we also need to 'grand' them access via 'this'
        this.h = h;
        this.s = s;
        this.l = l;
    }
};

let hslTest = new Color(200, 100, 20);
console.log(hslTest.calcHSL()); // ***** 4) will be 'undefined' as we don't return anything
console.log(hslTest);
console.log(hslTest.hsl());
document.body.style.backgroundColor = hslTest.hsl();

***Testing opposite();

console.log(hslTest.opposite());
document.body.style.backgroundColor = hslTest.opposite();

***Testing fullySaturated():

let fullySat = new Color(120, 10, 250);
console.log(fullySat.fullySaturated());

// ============================ 5th Lesson: 'extends' and 'super' keywords ================================== //

Example:

1. Define 2 very similar classes with very similar values and methods:

class Cat {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    eat() {
        return `${this.name} eats food!`
    }
    meaw() {
        return 'Meaaauu!'
    }
}


class Dog {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    eat() {
        return `${this.name} eats food!`
    }
    bark() {
        return 'Aggrrr!'
    }
}

2. This lines of codes are similar and repetative!

 constructor(name, age) {
     this.name = name;
     this.age = age;
 }
 eat() {
     return `${this.name} eats food!`
 }

So we can put the in one separate class, let's call this class 'Pet'
and remove the from our two 'subclasses' - 'Cat' and 'Dog'
but if we want this 2 classes 'Cat' and 'Dog' to still have an access to main class 'Pet' we need to use 
a 'extends' keyword:

class Pet {
    constructor(name, age) {
        this.name = name;
        this.age = age;
    }
    eat() {
        return `${this.name} eats food!`
    }
};

class Cat extends Pet {  // in this case class 'Cat' extends from 'Pet' and have acces to 'Pet' constructor() values
    meaw() {             // class 'Cat' have only his own method left and all other values can be extended and accessed from 'Pet'
        return 'Meaaauu!'
    }
}
Now we can call 'Cat' and use some values, that are stored in 'Pet' constructor()
const myCat = new Cat('monty', 10); // return 'Cat' object with values

class Dog extends Pet { // in this case class 'Dog' extends from 'Pet' and have acces to 'Pet' constructor() values
    bark() {            // class 'Dog' have only his own method left and all other values can be extended and accessed from 'Pet'
        return 'Aggrrr!'
    }
}

But if we want to add another constructor in the 'Cat' class and still use some values stored in 'Pet' class constructor
we need to use keyword 'super', syntax is the following:

class Cat extends Pet {
    constructor(name, age, maxLives = 9) { // setting some specific 'cat-only' parametr to 'Cat' class (maxLives = 9)
        super(name, age) // we are 'telling' 'Cat' class constrictor() to access specific values (name and age) from 'Pet' class constructor
        this.lives = maxLives; // and at the same time we can set 'Cat's class own this.lives via this 
    }
}
and meaw() method in this case will be accesed by 'Cat' class from 'Pet' class automatically, because of 'extends' keyword
